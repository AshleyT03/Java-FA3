/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package counter;

import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author ic westgate
 */
public class CounterGUI extends javax.swing.JFrame {

    private static int counter = 0;
    
    /**
     * Creates new form CounterGUI
     */
    public CounterGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnCount = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        SValue = new javax.swing.JSpinner();
        tfResult = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.Color.orange);

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 102));
        jLabel1.setText("ENTER VALUE");

        btnCount.setFont(new java.awt.Font("Yu Gothic UI Semibold", 3, 14)); // NOI18N
        btnCount.setForeground(new java.awt.Color(0, 0, 102));
        btnCount.setText("COUNT");
        btnCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCountActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 102));
        jLabel2.setText("RESULT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnCount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                        .addGap(94, 94, 94)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfResult, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SValue, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(SValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(btnCount)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static void runSynchronizedImplementation(int incrementValue, JTextField tfResult){
        // Reset the counter to 0 before incrmenting
        counter = 0;
        Object lock = new Object();
        
        // Create 2 threads for the synchronized implementation
        Thread thread1 = new Thread(() -> {
            for (int i = 0; i < incrementValue; i++){
                synchronized (lock){
                    // Synchronized on a common object
                    counter++;
                }
            }
        });
        
        Thread thread2 = new Thread(() -> {
            for (int i = 0; i < incrementValue; i++){
                synchronized (lock){
                    // Synchronized on a common object
                    counter++;
                }
            }
        });
        
        thread1.start();
        thread2.start();
        
        try{
            // Wait for both threads to finish
            thread1.join();
            thread2.join();
            
            // Display the result in the TextArea
            tfResult.setText(Integer.toString(counter));
        } catch (InterruptedException e){
            e.printStackTrace();
        }
    }
    
    private static void runAtomicIntegerImplementation(int incrementValue, JTextField tfResult){
        AtomicInteger atomicCounter = new AtomicInteger(0);
        
        Thread thread1 = new Thread(() -> {
            for (int i = 0; i < incrementValue; i++){
                atomicCounter.incrementAndGet();
            }
        });
        
        Thread thread2 = new Thread(() -> {
           for (int i = 0; i < incrementValue; i++) {
               atomicCounter.incrementAndGet();
           }
        });
        
        thread1.start();
        thread2.start();
        
        try{
            thread1.join();
            thread2.join();
        } catch(InterruptedException e){
            e.printStackTrace();
        }
        
        tfResult.setText(Integer.toString(atomicCounter.get()));
    }
    
    private void btnCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCountActionPerformed

        int selectedValue1 = (int) SValue.getValue();
        
        String input = JOptionPane.showInputDialog("Enter the second value for AtomicInteger: ");
        
        if (input != null){
            try{
                // Parse the user input as an integer
                int selectedValue2 = Integer.parseInt(input);
                
                // Use the retrieved Values for the implementations
                runSynchronizedImplementation(selectedValue1, tfResult);
                runAtomicIntegerImplementation(selectedValue1, tfResult);
            } catch (NumberFormatException ex){
                // Handle invalid input (non-integer input)
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter a valid integer for AtomicInteger.");
            }
        }
    }//GEN-LAST:event_btnCountActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CounterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CounterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CounterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CounterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CounterGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner SValue;
    private javax.swing.JButton btnCount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField tfResult;
    // End of variables declaration//GEN-END:variables
}
